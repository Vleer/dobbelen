import React, { useState, useEffect, useCallback } from 'react';
import { Game } from '../types/game';
import { gameApi } from '../api/gameApi';

interface MultiplayerLobbyProps {
  onGameStart: (game: Game, playerId: string, username: string) => void;
  onBack: () => void;
}

// Dutch names for random selection
const DUTCH_NAMES = [
  'Henk', 'Jan', 'Piet', 'Klaas', 'Willem', 'Dirk', 'Frits', 'Gerard', 'Hendrik', 'Kees',
  'Maarten', 'Niels', 'Otto', 'Paul', 'Rik', 'Sander', 'Tom', 'Vincent', 'Wouter', 'Yuri',
  'Anna', 'Bianca', 'Carla', 'Diana', 'Eva', 'Fleur', 'Gina', 'Hanna', 'Iris', 'Julia',
  'Kim', 'Lisa', 'Marijke', 'Nina', 'Olga', 'Petra', 'Rosa', 'Sanne', 'Tessa', 'Ursula'
];

const MultiplayerLobby: React.FC<MultiplayerLobbyProps> = ({ onGameStart, onBack }) => {
  const [gameId, setGameId] = useState('');
  const [playerName, setPlayerName] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [isJoining, setIsJoining] = useState(false);
  const [error, setError] = useState('');
  const [game, setGame] = useState<Game | null>(null);
  const [isHost, setIsHost] = useState(false);
  const [aiPlayerCount, setAiPlayerCount] = useState(0);
  const [hasJoined, setHasJoined] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);

  // Short game IDs are now generated by the backend

  // Get a random Dutch name
  const getRandomDutchName = () => {
    return DUTCH_NAMES[Math.floor(Math.random() * DUTCH_NAMES.length)];
  };

  // Separate function to join game with a specific ID
  const handleAutoJoin = useCallback(async (gameIdToJoin: string) => {
    if (!playerName.trim() || hasJoined) {
      return;
    }

    try {
      setIsJoining(true);
      setError('');
      
      console.log('Auto-joining game with ID:', gameIdToJoin, 'and name:', playerName);
      const joinedGame = await gameApi.joinMultiplayerGame(gameIdToJoin, playerName);
      console.log('Auto-joined game successfully:', joinedGame);
      
      setGame(joinedGame);
      setIsHost(false);
      setHasJoined(true);
      
      // Update URL with game ID
      const newUrl = `${window.location.origin}${window.location.pathname}?gameId=${gameIdToJoin}`;
      window.history.pushState({}, '', newUrl);
    } catch (err: any) {
      console.error('Error auto-joining game:', err);
      setError(err.response?.data?.message || err.message || 'Failed to join game');
    } finally {
      setIsJoining(false);
    }
  }, [playerName, hasJoined]);

  // Initialize component - only run once
  useEffect(() => {
    if (isInitialized) return;
    
    // Pre-fill with a random Dutch name
    setPlayerName(getRandomDutchName());
    
    // Check if we have a game ID in the URL
    const urlParams = new URLSearchParams(window.location.search);
    const urlGameId = urlParams.get('gameId');
    if (urlGameId) {
      setGameId(urlGameId);
      // Automatically try to join the game
      handleAutoJoin(urlGameId);
    }
    
    setIsInitialized(true);
  }, [isInitialized]);

  // Poll for game updates when in a game - only fetch, don't join
  useEffect(() => {
    if (!game || !gameId || !isInitialized) return;

    const pollInterval = setInterval(async () => {
      try {
        console.log('Polling game updates for gameId:', gameId);
        const updatedGame = await gameApi.getMultiplayerGame(gameId);
        console.log('Polled game state:', updatedGame.state, 'players:', updatedGame.players.length);
        
        // Check if game has started
        if (updatedGame.state === 'IN_PROGRESS' && game.state === 'WAITING_FOR_PLAYERS') {
          console.log('Game started! Transitioning to game table...');
          const player = updatedGame.players.find(p => p.name === playerName);
          if (player) {
            onGameStart(updatedGame, player.id, playerName);
          }
        }
        
        setGame(updatedGame);
      } catch (err) {
        console.error('Error polling game updates:', err);
      }
    }, 2000); // Poll every 2 seconds

    return () => clearInterval(pollInterval);
  }, [game, gameId, isInitialized, playerName, onGameStart]);

  const createGame = async () => {
    if (!playerName.trim()) {
      setError('Please enter your name');
      return;
    }

    try {
      setIsCreating(true);
      setError('');

      console.log('Creating multiplayer game...');
      const gameResponse = await gameApi.createMultiplayerGame();
      console.log('Game created successfully:', gameResponse);

      // First, add the host (creator) to the game
      let updatedGame = await gameApi.joinMultiplayerGame(gameResponse.id, playerName);
      console.log('Host joined game successfully:', updatedGame);

      // Then add AI players if requested
      if (aiPlayerCount > 0) {
        for (let i = 0; i < aiPlayerCount; i++) {
          const aiName = `AI Player ${i + 1}`;
          updatedGame = await gameApi.joinMultiplayerGame(gameResponse.id, aiName);
          console.log(`Added AI player ${i + 1}:`, updatedGame);
        }
      }

      setGame(updatedGame);
      setGameId(updatedGame.id);
      setIsHost(true);
      setHasJoined(true); // Mark as joined to prevent duplicates

      // For now, skip WebSocket and just show the lobby
      // TODO: Add WebSocket back once basic functionality works

      // Update URL with game ID
      const newUrl = `${window.location.origin}${window.location.pathname}?gameId=${updatedGame.id}`;
      window.history.pushState({}, '', newUrl);
    } catch (err: any) {
      console.error('Error creating game:', err);
      setError(err.response?.data?.message || err.message || 'Failed to create game');
    } finally {
      setIsCreating(false);
    }
  };

  const joinGame = async () => {
    if (!gameId.trim() || !playerName.trim()) {
      setError('Please enter both game ID and your name');
      return;
    }

    // Prevent duplicate joins
    if (hasJoined) {
      console.log('Already joined a game, skipping duplicate join attempt');
      return;
    }

    try {
      setIsJoining(true);
      setError('');
      
      console.log('Joining game with ID:', gameId, 'and name:', playerName);
      const joinedGame = await gameApi.joinMultiplayerGame(gameId, playerName);
      console.log('Joined game successfully:', joinedGame);
      
      setGame(joinedGame);
      setIsHost(false);
      setHasJoined(true); // Mark as joined to prevent duplicates
      
      // For now, skip WebSocket and just show the lobby
      // TODO: Add WebSocket back once basic functionality works
      
      // Update URL with game ID
      const newUrl = `${window.location.origin}${window.location.pathname}?gameId=${gameId}`;
      window.history.pushState({}, '', newUrl);
    } catch (err: any) {
      console.error('Error joining game:', err);
      console.error('Error details:', err.response?.data);
      setError(err.response?.data?.message || err.message || 'Failed to join game');
    } finally {
      setIsJoining(false);
    }
  };

  const addAIPlayer = async () => {
    if (!game || !isHost) return;
    
    try {
      const aiName = `AI Player ${game.players.filter(p => p.name.startsWith('AI Player')).length + 1}`;
      const updatedGame = await gameApi.joinMultiplayerGame(game.id, aiName);
      setGame(updatedGame);
      console.log('Added AI player:', aiName);
    } catch (err: any) {
      console.error('Error adding AI player:', err);
      setError('Failed to add AI player');
    }
  };

  const copyGameLink = () => {
    const gameLink = `${window.location.origin}${window.location.pathname}?gameId=${gameId}`;
    navigator.clipboard.writeText(gameLink);
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-green-800">
      <div className="bg-white p-8 rounded-lg shadow-lg max-w-lg w-full">
        <h1 className="text-4xl font-bold text-center mb-8 text-green-800">
          🎲 Liar's Dice
        </h1>

        {!game ? (
          <div className="space-y-6">
            {/* Player Name */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Your Name
              </label>
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={playerName}
                  onChange={(e) => setPlayerName(e.target.value)}
                  className="flex-1 p-3 border rounded-lg focus:ring-2 focus:ring-green-500 text-lg"
                  placeholder="Enter your name"
                />
                <button
                  onClick={() => setPlayerName(getRandomDutchName())}
                  className="px-4 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium"
                >
                  🎲
                </button>
              </div>
            </div>

            {/* AI Players */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                AI Players
              </label>
              <div className="flex items-center justify-center space-x-4">
                <button
                  onClick={() => setAiPlayerCount(Math.max(0, aiPlayerCount - 1))}
                  className="w-12 h-12 bg-gray-300 text-gray-700 rounded-full hover:bg-gray-400 text-xl font-bold"
                  disabled={aiPlayerCount <= 0}
                >
                  -
                </button>
                <span className="text-2xl font-bold text-green-600 min-w-[3rem] text-center">
                  {aiPlayerCount}
                </span>
                <button
                  onClick={() => setAiPlayerCount(Math.min(5, aiPlayerCount + 1))}
                  className="w-12 h-12 bg-gray-300 text-gray-700 rounded-full hover:bg-gray-400 text-xl font-bold"
                  disabled={aiPlayerCount >= 5}
                >
                  +
                </button>
              </div>
            </div>

            {/* Main Action Buttons */}
            <div className="space-y-4">
              <button
                onClick={createGame}
                disabled={isCreating || !playerName.trim()}
                className="w-full py-4 px-6 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 text-xl font-bold"
              >
                {isCreating ? 'Creating...' : '🎮 Create New Game'}
              </button>

              <div className="flex items-center space-x-4">
                <div className="flex-1 h-px bg-gray-300"></div>
                <span className="text-gray-500 font-medium">or</span>
                <div className="flex-1 h-px bg-gray-300"></div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Join Existing Game
                </label>
                <div className="flex space-x-2">
                  <input
                    type="text"
                    value={gameId}
                    onChange={(e) => setGameId(e.target.value.toUpperCase())}
                    className="flex-1 p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 text-lg font-mono text-center"
                    placeholder="GAME ID"
                    maxLength={6}
                  />
                  <button
                    onClick={joinGame}
                    disabled={isJoining || !gameId.trim() || !playerName.trim()}
                    className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 font-bold"
                  >
                    {isJoining ? 'Joining...' : 'Join'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-2xl font-bold text-green-800 mb-2">
                {isHost ? '🎮 Game Created!' : '✅ Joined Game!'}
              </h2>
              <div className="bg-gray-100 p-4 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">Game ID</p>
                <p className="text-2xl font-mono font-bold text-green-600">{gameId}</p>
              </div>
            </div>

            <div className="bg-gray-100 p-4 rounded-lg">
              <h3 className="font-bold mb-3 text-lg">Players ({game.players.length}/{game.maxPlayers})</h3>
              <div className="grid grid-cols-2 gap-2">
                {game.players.map((player, index) => (
                  <div key={player.id} className="flex items-center bg-white p-2 rounded">
                    <span className="w-6 h-6 bg-green-600 text-white rounded-full flex items-center justify-center text-sm mr-2 font-bold">
                      {index + 1}
                    </span>
                    <span className="font-medium">{player.name}</span>
                  </div>
                ))}
              </div>
            </div>

            {isHost && (
              <div className="space-y-3">
                <button
                  onClick={copyGameLink}
                  className="w-full py-3 px-4 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 font-bold"
                >
                  📋 Copy Game Link
                </button>
                <button
                  onClick={addAIPlayer}
                  className="w-full py-3 px-4 bg-purple-600 text-white rounded-lg hover:bg-purple-700 font-bold"
                  disabled={game.players.length >= game.maxPlayers}
                >
                  🤖 Add AI Player ({game.players.length}/{game.maxPlayers})
                </button>
                <button
                  onClick={async () => {
                    const player = game.players.find(p => p.name === playerName);
                    if (player) {
                      try {
                        console.log('Starting multiplayer game...');
                        const startedGame = await gameApi.startMultiplayerGame(gameId);
                        console.log('Game started successfully:', startedGame);
                        onGameStart(startedGame, player.id, playerName);
                      } catch (err: any) {
                        console.error('Error starting game:', err);
                        setError(err.response?.data?.message || err.message || 'Failed to start game');
                      }
                    }
                  }}
                  className="w-full py-4 px-6 bg-green-600 text-white rounded-lg hover:bg-green-700 font-bold text-xl"
                >
                  🚀 Start Game ({game.players.length} players)
                </button>
              </div>
            )}

            <div className="text-center text-gray-600">
              {game.isWaitingForPlayers ? '⏳ Waiting for more players...' : '🎯 Game starting...'}
            </div>
          </div>
        )}

        {error && (
          <div className="mt-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
            ❌ {error}
          </div>
        )}
      </div>
    </div>
  );
};

export default MultiplayerLobby;
